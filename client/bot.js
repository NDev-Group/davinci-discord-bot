// Get OpenAI API
const { Configuration, OpenAIApi } = require("openai");

// Setup Dotenv
require("dotenv").config();

// Configure OpenAPI API
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

// Setup DaVinci
const { Client, GatewayIntentBits } = require("discord.js");
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

// Start Message
client.on("ready", () => {
  console.log(`DaVinci has successfully started. Logged in as ${client.user.tag}! Version: ${process.env.VERSION}`);
});

// Commands Handling
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  if (interaction.commandName === "ask") {
    user_prompt = interaction.options.getString("prompt");
    try {
      await interaction.reply("Processing your request.");
      const result = await get_ai_response(user_prompt);
      await interaction.editReply(result);
    } catch {
      console.log("An internal error occurred.");
    }

  }
});

// Returns a Response generated by OpenAI
async function get_ai_response(prompt) {
  const response = await openai.createCompletion({
    model: "text-davinci-003",
    prompt: prompt,
    temperature: 0.0,
    max_tokens: 2000,
    top_p: 1,
    frequency_penalty: 0.5,
    presence_penalty: 0,
    stop: ['"""'],
  });

  return response.data.choices[0].text;
}

// Login DaVinci
client.login(process.env.DISCORD_KEY);
